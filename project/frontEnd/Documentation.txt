MIT License
Copyright (c) 2019
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

GETTING STARTED

-Install NodeJS
-Open Terminal
-Go to your file project
-Run in terminal  'npm install'
-Then run 'npm start' or 'npm run install:clean'
-If you have an error containing 'Module not found' check if in your root project folder you have a file named .env . If you do not have it, then create it and add ':NODE_PATH=./src' , if that doesnt not work you need to do the following 'npm install --g cross-env' then change the script inside package.json by adding 'NODE_PATH=./src' inside it.
-Navigate to https://localhost:3000

FILE STRUCTURE
paper-dashboard-react
├── CHANGELOG.md
├── ISSUE_TEMPLATE.md
├── LICENSE.md
├── README.md
├── package.json
├── public
│   ├── index.html
│   └── manifest.json
└── src
    ├── index.js
    ├── logo-white.svg
    ├── logo.svg
    ├── assets
    │   ├── demo
    │   ├── fonts
    │   ├── img
    │   └── scss
    │       ├── paper-dashboard
    │       │   ├── cards
    │       │   ├── mixins
    │       │   └── plugins
    │       └── paper-dashboard.scss
    ├── components
    │   ├── CardElements
    │   │   ├── CardAuthor.jsx
    │   ├── CustomButton
    │   │   └── CustomButton.jsx
    │   ├── CustomCheckbox
    │   │   └── SimpleCheckbox.jsx
    │   ├── CustomRadio
    │   │   └── CustomRadio.jsx
    │   ├── FixedPlugin
    │   │   └── FixedPlugin.jsx
    │   ├── Footer
    │   │   └── Footer.jsx
    │   ├── FormInputs
    │   │   └── FormInputs.jsx
    │   ├── Header
    │   │   └── Header.jsx
    ├── layouts
    │   └── Dashboard
    │       └── Dashboard.jsx
    ├── routes
    │   ├── dashboard.jsx
    │   └── index.jsx
    ├── variables
    │   ├── adminTable.jsx
    │   ├── studentToAssign.jsx
    └── views
        ├── Admin
        │   └── Admin.jsx
        ├── FAQ
        │   └── FAQ.jsx
        ├── Home
        │   └── Home.jsx
        ├── myBuddy
        │   └── myBuddy.jsx
        ├── RegisterForm
        │   └── RegisterForm.jsx
        ├── SuperAdmin
        │   └── SuperAdmin.jsx
        └── UserPage
            └── UserPage.jsx

CARDS

-Bootstrap's cards provide a flexible and extensible content container with multiple variants and options
  Content Types
    Cards support a wide variety of content, including images, text, list groups, links, and more.
      - Body: the building block of a card is the 'CardBody'. Use it whenever you need a padded section within a card
      - Titles, text and links
      - Images
      - List groups
      - Header and footer
      - Text alignment: you  can quickly change the text alignment of any card with text align classes
      - Navigation

COLOURS

-You can change the default colours via variables from SCSS
(find the colours in assets/scss/paper-dashboard/_variables.scss)

FORMS

-Form controls
    Textual form controls are styled through the .form-control class.
-Checkboxes and radios
    Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many
        -Inline: Group checkboxes or radios on the same horizontal rows by adding 'inlline' prop to the FormGroup
-Layout
    Bootstrap applies 'display:block' and 'width:100%' to almost all our form controls, forms will by default stack vertically.
-Form grid
    More complex forms can be built using grid classes. Use these for form layouts that require multiple columns, varied widths and additional alignment options

FORM INPUTS

-For a better way to render form inputs use 'FormInputs'. We use this component to create a whole row of inputs. To use this component you need to import it 'import FormInputs from 'components/FormInputs/FormInputs.jsx';'

NAME	                     TYPE	             DEFAULT	DESCRIPTION
label :	                   string / node	   null	    Use this to add a label and a text to it.
addonLeft :	               string / node	   null	    Use this to add an left addon to the input.
addonRight :	             string / node	   null   	Use this to add an right addon to the input.
formGroupProps : {}	       array of objects	 null   	Use this to add props to the FormGroup component.
labelProps : {}	           array of objects	 null   	Use this to add props to the Label component.
inputProps : {}	           array of objects	 null   	Use this to add props to the Input component.
inputGroupProps : {}	     array of objects	 null    	Use this to add props to the InputGroup component.
inputGroupAddonProps : {}	 array of objects	 null   	Use this to add props to the InputGroupAddon component.

SIDEBAR

-A component for the main navigation of the dashboard, 'Sidebar', which is located in 'src/components/Sidebar/Sidebar.jsx'. To use it, you need to import it: 'import Sidebar from 'components/Sidebar/Sidebar.jsx';'
-6 different colors (black, blue, green, orange, red, yellow), to set the color of this component go to src/components/Sidebar/Sidebar and change the data-color attribute to one of the colours
-When using this component you will have to pass a prop named routes to it. This prop has to be the routes of your app and all the links in the Sidebar component will be made dynamically (routes can be found in src/routes)
